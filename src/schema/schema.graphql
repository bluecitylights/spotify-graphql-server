# The root of all queries:

union SearchResult = Album | Artist | Playlist | Track

type Query {
  me: User
  user(id: ID): PublicUser
  artists(byName: String = "Red Hot Chili Peppers"): [Artist]
  playlists(ids: [String]): [Playlist]
  search(text: String!): [SearchResult]!
}

type Mutation {
  play(playContext: PlayContext): Track,
  pause: Track,
  next: Track,
  previous: Track 
}

type User {
  display_name: String
  id: ID
  image: String
  playlists(limit: Int = 5, offset: Int = 0): [Playlist]
  stats: Statistics
  topTracks(timeRange: TimeRange = short_term, limit: Int = 5, offset: Int = 0): [Track]
  topArtists(timeRange: TimeRange = short_term, limit: Int = 5, offset: Int = 0): [Artist]
  player: Player
}
type Statistics {
  id: ID
  topTracks(timeRange: TimeRange = short_term, limit: Int = 5, offset: Int = 0): [Track]
  topArtists(timeRange: TimeRange = short_term, limit: Int = 5, offset: Int = 0): [Artist]
}
type Player {
  recent: [Track]
  current: Track
}
type PublicUser {
  display_name: String
  id: ID
  image: String
  playlists(limit: Int = 5, offset: Int = 0): [Playlist]
}
type Artist {
  name: String!
  id: ID!
  image: String
  albums(limit: Int = 10): [Album]
}
type Album {
  name: String!
  id: ID!
  image: String
  tracks: [Track]
}
type Track {
  name: String!
  artists: [Artist]
  preview_url: String
  id: ID!
  lyrics: String
  image: String
},
type Playlist {
  name: String!
  id: ID,!
  image: String
  collaborative: Boolean
  tracks: [Track]
}
enum TimeRange {
  short_term
  medium_term
  long_term
}

input PlayContext {
  context_uri: String
  track_uris: [String]
}